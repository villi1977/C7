#!/bin/sh
#
# Usage:
# /sbin/mount.ploop spec dir [-h] [-o options]
#
# (c) 2012. Parallels IP Holdings GmbH. All rights reserved.
#

PLOOP="ploop"
DESCRIPTOR="DiskDescriptor.xml"
DISK_DESCRIPTOR=""
MOUNT_POINT=""
OPTIONS=""
OPTS_ORIG=""
READLINK="readlink"
MTAB="/etc/mtab"
LOGFILE="/var/log/ploop_mount.log"
MODULES="ploop pfmt_ploop1 pfmt_raw pio_direct pio_nfs pio_kaio"
VERBOSE=""
FAKE=""
SELF=$(basename $0)

log() {
	if [ "x$USER" = "x" ]; then
		echo $* >> $LOGFILE
	fi
	echo $*
}

verbose() {
	[ -n "$VERBOSE" ] && echo "$SELF: $*"
}

parse_opt() {
	local opts="$1"
	local nparam="$2"
	local string=""
	local value=""
	local param=""
	while [ "x$opts" != "x" ]; do
		string=`echo $opts | sed "s,\,.*,,g"`
		echo $string | grep "=" > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			value=`echo $string | sed "s,.*=,,g"`
			param=`echo $string | sed "s,=.*,,g"`
		else
			param="$string"
		fi
		if [ "x$param" = "x$nparam" ]; then
			[ "x$value" != "x" ] && echo $value
			return 0
		fi
		opts=`echo $opts | sed -e "s,^$string,,g" -e "s,^\,,,g"`
	done
	return 1
}

canonicalize() {
	$READLINK -f "$1" 2>/dev/null
}

check_bin() {
	if ! which $1 >/dev/null; then
		log "$1 utility is not found"
		exit 2
	fi
}

load_modules() {
	local m

	for m in $MODULES; do
		modprobe $m
	done
}

mangle() {
	echo "$1" |
	sed	-e 's/\\/\\134/g' \
		-e 's/ /\\040/g'  \
		-e 's/\t/\\011/g' |
	sed ':a;N;$!ba;s/\n/\\012/g'
}

unmangle() {
	echo -n "$1" | sed \
		-e 's/\\040/ /g'  -e 's/\\011/\t/g' \
		-e 's/\\012/\n/g' -e 's/\\134/\\/g'
}

# Place the timestamp into log
if [ "x$USER" = "x" ]; then
	date >> $LOGFILE
fi

# Make sure we have sane PATH
for P in /sbin /usr/sbin /usr/local/sbin; do
	if ! echo ":${PATH}:" | fgrep -q ":${P}:"; then
		PATH="$P:$PATH"
	fi
done
export PATH

check_bin $PLOOP
check_bin $READLINK

case "$1" in
	-h|--help|-?)
		log "mount.ploop is a private mount(8) wrapper for ploop."
		log "Don't use it directly!"
		exit 1
	;;
esac

# Parse the parameters
if [ "x$1" = "x" ]; then
	log "ploop-related $DESCRIPTOR was not given"
	exit 32
else
	DISK_DESCRIPTOR=`canonicalize "$1"`
	if [ ! -f "$DISK_DESCRIPTOR" ]; then
		log "$DISK_DESCRIPTOR does not exist"
		exit 32
	fi
	shift
fi

if [ "x$1" = "x" ]; then
	log "Mount point was not given"
	exit 32
else
	MOUNT_POINT=`canonicalize "$1"`
	if [ ! -d "$MOUNT_POINT" ]; then
		log "$MOUNT_POINT does not exist"
		exit 32
	fi
	shift
fi

# Parse options
while [ -n "$1" ]; do
	case "$1" in
	    -o)
		shift
		OPTS_ORIG="$1"
		ro=`parse_opt $1 ro`
		if [ $? -eq 0 -a "x$ro" != "x" ]; then
			OPTIONS="$OPTIONS -r"
		fi
		;;
	    -v)
		VERBOSE=yes
		;;
	    -f)
		FAKE=yes
		;;
	    -n)
		# Deliberately ignore, since otherwise there will be
		# no record with "ploop" in /etc/mtab and umount won't
		# run umount.ploop helper.
		verbose "option -n deliberately ignored"
		;;
	    -s)
		# ignore as we don't have any subtypes
		;;
	    *)
		verbose "unexpected option $* ignored"
		;;
	esac
	shift
done

# Check that it's already mounted
for mpoint in `awk '{print $2}' /proc/mounts`; do
	if [ "$(unmangle $mpoint)" = "$MOUNT_POINT" ]; then
		log "$MOUNT_POINT already mounted"
		exit 32
	fi
done

load_modules

# Call the ploop utility
verbose "running $PLOOP mount $OPTIONS -m $MOUNT_POINT $DISK_DESCRIPTOR"
if [ -z "$FAKE" ]; then
	if [ "x$USER" = "x" ]; then
		$PLOOP mount $OPTIONS -m "$MOUNT_POINT" "$DISK_DESCRIPTOR" >> $LOGFILE 2>&1
	else
		$PLOOP mount $OPTIONS -m "$MOUNT_POINT" "$DISK_DESCRIPTOR"
	fi
fi

if [ $? -ne 0 ]; then
	log "$PLOOP mount $OPTIONS -m $MOUNT_POINT $DISK_DESCRIPTOR command failed"
	exit 32
fi

# Fill /etc/mtab
if [ -f $MTAB ]; then
	verbose "adding mount to $MTAB"
	echo "$(mangle "$DISK_DESCRIPTOR") $(mangle "$MOUNT_POINT") ploop $OPTS_ORIG 0 0" >> $MTAB
fi

exit 0
